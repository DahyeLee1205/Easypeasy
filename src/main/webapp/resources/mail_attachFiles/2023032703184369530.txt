1) 컬렉션이란 뭔지 설명하시오.
컬렉션은 자바에서 제공하는 자료구조 담당 프레임 워크이다.
자료구조란 메모리 상에서 자료를 구조적으로 처리하는 방법을 일컫는다.

자료구조는 아래와 같다.
- 단순구조(변수)
 가. 정수:
 나. 실수 
 다. 문자 
 라. 문자열

-선형구조
 가. 리스트
 나. 연결리스트
  (1) 단순 연결리스트
  (2) 이중 연결리스트
  (3) 원형 연결리스트

 다. 스택
 라. 큐
 마. 덱

-비선형구조
 가. 트리
  (1) 일반 트리
  (2) 이진 트리
 나. 그래프
  (1) 방향 그래프
  (2) 무방향 그래프

-파일구조
 가. 순차파일
 나. 색인파일
 다. 직접파일

자료의 추가, 삭제, 정렬 등의 기능처리가 간단하게 해결되어 자료구조적 알고리즘을 개발자가 직접 구현할 필요가 없다.
컬렉션은 java의 util 패키지에 포함되며 인터페이스를 통해 정형화된 방법으로 컬렉션 클래스를 이용한다.

컬렉션의 장점은
첫째, 저장하는 크기의 제약이 없다.
둘째, 추가, 삭제, 정렬 등의 기능 처리가 간단하게 해결된다.
셋째, 여러 타입의 데이터 저장이 가능하다.
(단, 객체만 저장할 수 있기 때문에 기본 자료형을 저장해야하는 경우 Wrapper 클래스 사용)
※ Wrapper 클래스 : 기본 자료형을 객체화 해주는 클래스
기본 자료형을 String 으로 바꾸거나 String을 기본 자료형으로 바꿀 수 있다.

컬렉션의 주요 인터페이스는
List 계열과 Set 계열로 나뉘고
List 계열은 ArrayList, Vector, LinkedList
Set 계열은 HashSet, TreeSet 이 있다.

List 계열의 특징은
첫째, 순서를 유지하고 저장한다는 것
둘째, 중복 저장이 가능하다는 것이다.

Set 계열의 특징은
첫째, 순서를 유지하지 않고 저장한다는 것
둘째, 중복 저장이 안된다는 것이다.

2) 포트폴리오에서 사용한 컬렉션인 ArrayList에 대해 설명하시오. 그리고 ArrayList에서 제공하는 주된 메소드 3개이상을 설명하시오.
ArrayList는 컬렉션의 List 계열 클래스 중 하나로 자료들을 순차적으로 나열한 자료구조로, 인덱스로 관리되고 중복해서 객체 저장이 가능하다.
List 주요 기능은 객체 추가, 객체 검색, 객체 삭제 등이 있다.

-객체 추가로 자주 사용되는 메소드 add(E e) 가 있다. E는 클래스, e는 객체의 매개변수 값을 의미한다.
-객체 검색으로 자주 사용되는 메소드는 get(int index), isEmpty(), size(), contains(Object o), Iterator() 등이 있다.
	get(int index)는 ArrayList에 인덱스에 담겨있는 객체를 반환(리턴)한다.
	isEmpty()는 ArrayList의 인덱스가 비어있는지 검사하는 기능을 수행한다.
	size()는 저장되어 있는 객체의 갯수를 반환한다.
	contains(Object o)는 주어진 객체가 저장되어 있는지 여부를 확인하여 논리값을 반환한다.
-객체 삭제로 자주 사용되는 메소드는 clear()와 remove()가 있다.
	clear()는 저장된 모든 객체를 삭제한다.
	remove()는 인덱스에 저장된 객체를 삭제하거나 주어진 객체를 삭제한다.

3) 그 외에 어떤 컬렉션 종류가 있는지, 이때 각 컬렉션의 특징에 대해서도 설명하시오.
컬렉션은 대표적으로 List와 Set가 있다.
List는 앞서 설명한대로 인덱스의 형태로 객체를 차곡 차곡 입력하기 때문에 순서가 존재하고 같은 객체를 중복해서 저장 가능하다.
또 일반적인 배열과 달리 크기를 지정하지 않아도 저장되는 객체에 맞춰 크기가 변한다.(인덱스가 늘어난다)

Set은 데이터의 집합이고 순서가 없어서 중복된 객체를 저장할 수 없다. 만일 저장하려고 하면 기존에 존재하던 객체에 오버라이드 된다.
인덱스가 존재하지 않기 때문에 Set계열에 저장된 객체를 검색하거나 반환하고자 할 때 반복자(iterator)를 주로 사용합니다.

4) 제네릭을 작성하는 이유에 대해 설명하시오.
제네릭은 자료구조의 타입을 클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 지정되는 것을 의미한다.
제네릭을 작성하는 이유는
1. 타입의 경계를 지정하기 때문에 잘못된 타입 들어오는 것을 예방할 수 있다. 이는 런타임 에러를 예방할 수 있는 안정성을 준다.
2. 제네릭은 앞서 타입체크를 진행하기 때문에 다양한 타입의 객체를 다루는 메소드나 컬렉션 클래스에서 컴파일시 형변환을 해야하는 수고를 덜어준다.
즉, 미리 지정된 타입을 사용하기 때문에 형변환이 불필요해진다.

5) String 타입을 int 타입으로 바꾸고자 할 때 어떤 방법을 이용해야되는지 설명하시오.
String a 를 int b로 바꾸고자 한다면. Integer 클래스의 parseInt() 클래스를 활용한다.
int b = Integer.parseInt(a);


